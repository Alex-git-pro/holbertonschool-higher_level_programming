First, import the function:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now, test with a simple 2x3 matrix:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test with a 2x2 matrix and a divisor of 2:
    >>> matrix_divided([[1, 2], [3, 4]], 2)
    [[0.5, 1.0], [1.5, 2.0]]

Test with a divisor of 0.5:
    >>> matrix_divided([[1, 2], [3, 4]], 0.5)
    [[2.0, 4.0], [6.0, 8.0]]

Test with a wrong type for divisor (string):
    >>> matrix_divided([[1, 2], [3, 4]], "a")
    Traceback (most recent call last):
    TypeError: div must be a number

Test with a matrix containing a string (wrong type for matrix element):
    >>> matrix_divided([["abc", 1], [2, 3]], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test division by zero:
    >>> matrix_divided([[1, 2], [3, 4]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

Test with a valid case but with a negative divisor:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], -2)
    [[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

Test with None as the divisor:
    >>> matrix_divided([[1, 2], [3, 4]], None)
    Traceback (most recent call last):
    TypeError: div must be a number

Test with float divisor:
    >>> matrix_divided([[1, 2], [3, 4]], 1.5)
    [[0.67, 1.33], [2.0, 2.67]]
